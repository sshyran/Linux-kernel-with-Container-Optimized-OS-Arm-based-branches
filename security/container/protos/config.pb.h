/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Wed Jun  5 11:00:24 2019. */

#ifndef PB_SCHEMA_CONFIG_PB_H_INCLUDED
#define PB_SCHEMA_CONFIG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _schema_ConfigurationResponse_ErrorCode {
    schema_ConfigurationResponse_ErrorCode_NO_ERROR = 0,
    schema_ConfigurationResponse_ErrorCode_UNKNOWN = 2
} schema_ConfigurationResponse_ErrorCode;
#define _schema_ConfigurationResponse_ErrorCode_MIN schema_ConfigurationResponse_ErrorCode_NO_ERROR
#define _schema_ConfigurationResponse_ErrorCode_MAX schema_ConfigurationResponse_ErrorCode_UNKNOWN
#define _schema_ConfigurationResponse_ErrorCode_ARRAYSIZE ((schema_ConfigurationResponse_ErrorCode)(schema_ConfigurationResponse_ErrorCode_UNKNOWN+1))

/* Struct definitions */
typedef struct _schema_ConfigurationResponse {
    schema_ConfigurationResponse_ErrorCode error;
    pb_callback_t msg;
    uint64_t version;
    uint32_t kernel_version;
/* @@protoc_insertion_point(struct:schema_ConfigurationResponse) */
} schema_ConfigurationResponse;

typedef struct _schema_ContainerCollectorConfig {
    bool enabled;
/* @@protoc_insertion_point(struct:schema_ContainerCollectorConfig) */
} schema_ContainerCollectorConfig;

typedef struct _schema_ExecuteCollectorConfig {
    bool enabled;
    uint32_t argv_limit;
    uint32_t envp_limit;
    pb_callback_t envp_allowlist;
/* @@protoc_insertion_point(struct:schema_ExecuteCollectorConfig) */
} schema_ExecuteCollectorConfig;

typedef struct _schema_MemExecCollectorConfig {
    bool enabled;
/* @@protoc_insertion_point(struct:schema_MemExecCollectorConfig) */
} schema_MemExecCollectorConfig;

typedef struct _schema_ConfigurationRequest {
    schema_ContainerCollectorConfig container_config;
    schema_ExecuteCollectorConfig execute_config;
    schema_MemExecCollectorConfig memexec_config;
/* @@protoc_insertion_point(struct:schema_ConfigurationRequest) */
} schema_ConfigurationRequest;

/* Default values for struct fields */

/* Initializer values for message structs */
#define schema_ContainerCollectorConfig_init_default {0}
#define schema_ExecuteCollectorConfig_init_default {0, 0, 0, {{NULL}, NULL}}
#define schema_MemExecCollectorConfig_init_default {0}
#define schema_ConfigurationRequest_init_default {schema_ContainerCollectorConfig_init_default, schema_ExecuteCollectorConfig_init_default, schema_MemExecCollectorConfig_init_default}
#define schema_ConfigurationResponse_init_default {_schema_ConfigurationResponse_ErrorCode_MIN, {{NULL}, NULL}, 0, 0}
#define schema_ContainerCollectorConfig_init_zero {0}
#define schema_ExecuteCollectorConfig_init_zero  {0, 0, 0, {{NULL}, NULL}}
#define schema_MemExecCollectorConfig_init_zero  {0}
#define schema_ConfigurationRequest_init_zero    {schema_ContainerCollectorConfig_init_zero, schema_ExecuteCollectorConfig_init_zero, schema_MemExecCollectorConfig_init_zero}
#define schema_ConfigurationResponse_init_zero   {_schema_ConfigurationResponse_ErrorCode_MIN, {{NULL}, NULL}, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define schema_ConfigurationResponse_error_tag   1
#define schema_ConfigurationResponse_msg_tag     2
#define schema_ConfigurationResponse_version_tag 3
#define schema_ConfigurationResponse_kernel_version_tag 4
#define schema_ContainerCollectorConfig_enabled_tag 1
#define schema_ExecuteCollectorConfig_enabled_tag 1
#define schema_ExecuteCollectorConfig_argv_limit_tag 2
#define schema_ExecuteCollectorConfig_envp_limit_tag 3
#define schema_ExecuteCollectorConfig_envp_allowlist_tag 4
#define schema_MemExecCollectorConfig_enabled_tag 1
#define schema_ConfigurationRequest_container_config_tag 1
#define schema_ConfigurationRequest_execute_config_tag 2
#define schema_ConfigurationRequest_memexec_config_tag 3

/* Struct field encoding specification for nanopb */
extern const pb_field_t schema_ContainerCollectorConfig_fields[2];
extern const pb_field_t schema_ExecuteCollectorConfig_fields[5];
extern const pb_field_t schema_MemExecCollectorConfig_fields[2];
extern const pb_field_t schema_ConfigurationRequest_fields[4];
extern const pb_field_t schema_ConfigurationResponse_fields[5];

/* Maximum encoded size of messages (where known) */
#define schema_ContainerCollectorConfig_size     2
/* schema_ExecuteCollectorConfig_size depends on runtime parameters */
#define schema_MemExecCollectorConfig_size       2
/* schema_ConfigurationRequest_size depends on runtime parameters */
/* schema_ConfigurationResponse_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONFIG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
